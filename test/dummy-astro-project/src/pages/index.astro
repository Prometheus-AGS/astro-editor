---
import { getCollection, render, getEntry } from 'astro:content';

const articles = await getCollection('articles');
const notes = await getCollection('notes');

const latestArticle = articles.sort((a, b) =>
  b.data.pubDate.getTime() - a.data.pubDate.getTime()
)[0];

const { Content } = await render(latestArticle);

// Get author for latest article
const latestAuthor = latestArticle.data.author
  ? await getEntry(latestArticle.data.author)
  : null;

// Get related articles for latest article
const relatedArticles = latestArticle.data.relatedArticles
  ? await Promise.all(latestArticle.data.relatedArticles.map(ref => getEntry(ref)))
  : [];
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>
		<h1>Articles & Notes</h1>

		<h2>All Articles</h2>
		<ul>
			{articles.map(async (article) => {
				const author = article.data.author ? await getEntry(article.data.author) : null;
				return (
					<li>
						{article.data.title} - {article.data.pubDate.toDateString()}
						{author && <span> by {author.data.name}</span>}
						{article.data.relatedArticles && article.data.relatedArticles.length > 0 && (
							<span> ({article.data.relatedArticles.length} related)</span>
						)}
					</li>
				);
			})}
		</ul>

		<h2>All Notes</h2>
		<ul>
			{notes.map(note => (
				<li>{note.data.title} - {note.data.pubDate.toDateString()}</li>
			))}
		</ul>

		<h2>Latest Article</h2>
		<h3>{latestArticle.data.title}</h3>
		{latestAuthor && <p>By: {latestAuthor.data.name} ({latestAuthor.data.email})</p>}
		{relatedArticles.length > 0 && (
			<p>Related articles: {relatedArticles.map(a => a.data.title).join(', ')}</p>
		)}
		<Content />
	</body>
</html>
